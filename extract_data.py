import functools
import pandas
from pandas.io import sql
import sqlalchemy
import pymysql
import numpy

recipe_data = pandas.read_csv("RAW_recipes.csv")

def listify(tag_string):
    return [tag.strip("'") for tag in tag_string.strip('][').split(", ")]

tag_lists = recipe_data['tags'].apply(listify)
unique_tags = functools.reduce(lambda a,b: set(a).union(set(b)), tag_lists.to_list())

cuisines = {
 'african',
 'american',
 'amish-mennonite',
 'angolan',
 'argentine',
 'asian',
 'australian',
 'austrian',
 'baja',
 'beijing',
 'belgian',
 'brazilian',
 'british-columbian',
 'cajun',
 'californian',
 'cambodian',
 'camping',
 'canadian',
 'cantonese',
 'caribbean',
 'central-american',
 'chilean',
 'chinese',
 'college',
 'colombian',
 'comfort-food',
 'congolese',
 'costa-rican',
 'creole',
 'cuban',
 'czech',
 'danish',
 'dutch',
 'ecuadorean',
 'egyptian',
 'english',
 'ethiopian',
 'european',
 'filipino',
 'finnish',
 'french',
 'georgian',
 'german',
 'greek',
 'guatemalan',
 'hawaiian',
 'heirloom-historical',
 'heirloom-historical-recipes',
 'honduran',
 'hunan',
 'hungarian',
 'icelandic',
 'indian',
 'indonesian',
 'iranian-persian',
 'iraqi',
 'irish',
 'italian',
 'japanese',
 'jewish-ashkenazi',
 'jewish-sephardi',
 'korean',
 'laotian',
 'lebanese',
 'libyan',
 'malaysian',
 'mexican',
 'micro-melanesia',
 'middle-eastern',
 'midwestern',
 'mongolian',
 'moroccan',
 'namibian',
 'native-american',
 'nepalese',
 'new-zealand',
 'nigerian',
 'north-american',
 'northeastern-united-states',
 'norwegian',
 'oaxacan',
 'ontario',
 'pacific-northwest',
 'pakistani',
 'palestinian',
 'pennsylvania-dutch',
 'peruvian',
 'picnic',
 'polish',
 'polynesian',
 'portuguese',
 'puerto-rican',
 'quebec',
 'russian',
 'saudi-arabian',
 'scandinavian',
 'scottish',
 'somalian',
 'soul',
 'south-african',
 'south-american',
 'south-west-pacific',
 'southern-united-states',
 'southwestern-united-states',
 'spanish',
 'sudanese',
 'swedish',
 'swiss',
 'szechuan',
 'thai',
 'turkish',
 'venezuelan',
 'vietnamese',
 'welsh',
}

dishes = {
 'appetizers',
 'baked-beans',
 'bar-cookies',
 'bean-soup',
 'beans-side-dishes',
 'beef-barley-soup',
 'beef-crock-pot',
 'beef-sauces',
 'beef-sausage',
 'beverages',
 'biscotti',
 'bisques-cream-soups',
 'black-bean-soup',
 'bread-pudding',
 'breads',
 'breakfast',
 'breakfast-casseroles',
 'breakfast-eggs',
 'breakfast-potatoes',
 'brownies',
 'brunch',
 'burgers',
 'cake-fillings-and-frostings',
 'cakes',
 'candy',
 'celebrity',
 'cheese',
 'cheesecake',
 'chicken-crock-pot',
 'chicken-stew',
 'chicken-stews',
 'chili',
 'chocolate',
 'chocolate-chip-cookies',
 'chowders',
 'chutneys',
 'clear-soups',
 'cobblers-and-crisps',
 'cocktails',
 'coffee-cakes',
 'collard-greens',
 'condiments-etc',
 'cookies-and-brownies',
 'cooking-mixes',
 'cranberry-sauce',
 'crock-pot-main-dish',
 'crusts-pastry-dough-2',
 'cupcakes',
 'curries',
 'desserts',
 'desserts-easy',
 'desserts-fruit',
 'dips',
 'dips-lunch-snacks',
 'dips-summer',
 'drop-cookies',
 'eggs-breakfast',
 'fillings-and-frostings-chocolate',
 'finger-food',
 'fish',
 'freshwater-fish',
 'frozen-desserts',
 'fruit',
 'fudge',
 'garnishes',
 'gifts',
 'grains',
 'granola-and-porridge',
 'greens',
 'gumbo',
 'halloween-cakes',
 'halloween-cocktails',
 'halloween-cupcakes',
 'ham-and-bean-soup',
 'hand-formed-cookies',
 'herb-and-spice-mixes',
 'ice-cream',
 'jams-and-preserves',
 'jellies',
 'lamb-sheep-main-dish',
 'lasagna',
 'lasagne',
 'leftovers',
 'lunch',
 'macaroni-and-cheese',
 'main-dish-beef',
 'main-dish-chicken',
 'main-dish-pasta',
 'main-dish-pork',
 'main-dish-seafood',
 'manicotti',
 'marinades-and-rubs',
 'marinara-sauce',
 'mashed-potatoes',
 'meat',
 'meatballs',
 'meatloaf',
 'middle-eastern-main-dish',
 'muffins',
 'mushroom-soup',
 'oatmeal',
 'omelets-and-frittatas',
 'pancakes-and-waffles',
 'pasta',
 'pasta-elbow-macaroni',
 'pasta-rice-and-grains',
 'pasta-rice-and-grains-elbow-macaroni',
 'pasta-salad',
 'pies',
 'pies-and-tarts',
 'pizza',
 'pork-crock-pot',
 'pork-loins-roast',
 'pot-pie',
 'pot-roast',
 'puddings-and-mousses',
 'pumpkin-bread',
 'punch',
 'quiche',
 'quick-breads',
 'ravioli-tortellini',
 'roast-beef',
 'roast-beef-comfort-food',
 'roast-beef-main-dish',
 'rolled-cookies',
 'rolls-biscuits',
 'salad-dressings',
 'salads',
 'salsas',
 'sandwiches',
 'sauces',
 'savory-pies',
 'savory-sauces',
 'scones',
 'seafood',
 'shakes',
 'shrimp-main-dish',
 'side-dishes-beans',
 'simply-potatoes',
 'simply-potatoes2',
 'smoothies',
 'snacks',
 'snacks-kid-friendly',
 'snacks-sweet',
 'soups-stews',
 'sourdough',
 'soy-tofu',
 'spaghetti',
 'spaghetti-sauce',
 'spreads',
 'steak',
 'steaks',
 'stews',
 'stews-poultry',
 'stir-fry',
 'stocks',
 'stuffings-dressings',
 'sugar-cookies',
 'sweet-sauces',
 'tarts',
 'tex-mex',
 'turkey-burgers',
 'vegetables',
 'veggie-burgers',
 'wings'
}

main_ingredients = {
 'a1-sauce',
 'apples',
 'artichoke',
 'asparagus',
 'avocado',
 'bacon',
 'bananas',
 'bass',
 'beans',
 'bear',
 'beef',
 'beef-kidney',
 'beef-liver',
 'beef-organ-meats',
 'beef-ribs',
 'berries',
 'black-beans',
 'blueberries',
 'bok-choys',
 'broccoli',
 'brown-rice',
 'cabbage',
 'carrots',
 'catfish',
 'cauliflower',
 'chard',
 'cherries',
 'chick-peas-garbanzos',
 'chicken',
 'chicken-breasts',
 'chicken-livers',
 'chicken-thighs-legs',
 'chinese-new-year',
 'citrus',
 'clams',
 'coconut',
 'cod',
 'corn',
 'crab',
 'crawfish',
 'deer',
 'duck',
 'duck-breasts',
 'eggplant',
 'eggs',
 'eggs-dairy',
 'elbow-macaroni',
 'elk',
 'gelatin',
 'goose',
 'grapes',
 'green-yellow-beans',
 'ground-beef',
 'halibut',
 'ham',
 'hidden-valley-ranch',
 'kiwifruit',
 'lamb-sheep',
 'lemon',
 'lentils',
 'lettuces',
 'lime',
 'lobster',
 'long-grain-rice',
 'mahi-mahi',
 'mango',
 'medium-grain-rice',
 'melons',
 'moose',
 'mushrooms',
 'mussels',
 'nuts',
 'octopus',
 'onions',
 'orange-roughy',
 'oranges',
 'oysters',
 'papaya',
 'pasta-shells',
 'peaches',
 'peanut-butter',
 'pears',
 'penne',
 'peppers',
 'perch',
 'pheasant',
 'pickeral',
 'pineapple',
 'pitted-fruit',
 'plums',
 'pork',
 'pork-chops',
 'pork-loin',
 'pork-loins',
 'pork-ribs',
 'pork-sausage',
 'potatoes',
 'poultry',
 'prepared-potatoes',
 'pumpkin',
 'quail',
 'rabbit',
 'raspberries',
 'rice',
 'salmon',
 'saltwater-fish',
 'scallops',
 'shellfish',
 'short-grain-rice',
 'shrimp',
 'sole-and-flounder',
 'spinach',
 'squash',
 'squid',
 'strawberries',
 'tempeh',
 'tilapia',
 'tomatoes',
 'tropical-fruit',
 'trout',
 'tuna',
 'turkey',
 'turkey-breasts',
 'veal',
 'white-rice',
 'whitefish',
 'whole-chicken',
 'whole-duck',
 'whole-turkey',
 'wild-game',
 'yams-sweet-potatoes',
 'yeast',
 'zucchini'
}

descriptors = {
 'beginner-cook',
 '1-day-or-more',
 '15-minutes-or-less',
 '3-steps-or-less',
 '30-minutes-or-less',
 '4-hours-or-less',
 '5-ingredients-or-less',
 '60-minutes-or-less',
 'easy',
 'flat-shapes',
 'for-1-or-2',
 'for-large-groups',
 'for-large-groups-holiday-event',
 'healthy',
 'healthy-2',
 'high-calcium',
 'high-fiber',
 'high-in-something-diabetic-friendly',
 'high-protein',
 'inexpensive',
 'infant-baby-friendly',
 'kid-friendly',
 'low-calorie',
 'low-carb',
 'low-cholesterol',
 'low-fat',
 'low-protein',
 'low-saturated-fat',
 'low-sodium',
 'novelty',
 'one-dish-meal',
 'ragu-recipe-contest',
 'romantic',
 'savory',
 'served-cold',
 'served-hot',
 'served-hot-new-years',
 'spicy',
 'sweet',
 'to-go',
 'toddler-friendly',
 'very-low-carbs'
}

dietary = {
 'dairy-free',
 'diabetic',
 'egg-free',
 'gluten-free',
 'kosher',
 'lactose',
 'no-shell-fish',
 'non-alcoholic',
 'nut-free',
 'vegan',
 'vegetarian'
}

occasion = {
 'april-fools-day',
 'birthday',
 'christmas',
 'cinco-de-mayo',
 'dinner-party',
 'easter',
 'fall',
 'fathers-day',
 'halloween',
 'hanukkah',
 'independence-day',
 'irish-st-patricks-day',
 'kwanzaa',
 'labor-day',
 'mardi-gras-carnival',
 'memorial-day',
 'mothers-day',
 'new-years',
 'passover',
 'potluck',
 'ramadan',
 'rosh-hashana',
 'rosh-hashanah',
 'seasonal',
 'spring',
 'st-patricks-day',
 'summer',
 'super-bowl',
 'superbowl',
 'thanksgiving',
 'valentines-day',
 'wedding',
 'weeknight',
 'winter'
}

technique = {
 'baking',
 'barbecue',
 'brewing',
 'broil',
 'canning',
 'copycat',
 'crock-pot-slow-cooker',
 'deep-fry',
 'dietary',
 'from-scratch',
 'grilling',
 'no-cook',
 'pressure-canning',
 'roast',
 'steam',
 'stove-top',
 'water-bath'
}

technique = {
 'baking',
 'barbecue',
 'brewing',
 'broil',
 'canning',
 'copycat',
 'crock-pot-slow-cooker',
 'deep-fry',
 'dietary',
 'from-scratch',
 'grilling',
 'no-cook',
 'pressure-canning',
 'roast',
 'steam',
 'stove-top',
 'water-bath'
}

labels =  {'',
 'Throw the ultimate fiesta with this sopaipillas recipe from Food.com.',
 'less_thansql:name_topics_of_recipegreater_than',
 'course',
 'cuisine',
 'equipment',
 'free-of-something',
 'high-in-something',
 'holiday-event',
 'low-in-something',
 'main-dish',
 'main-ingredient',
 'number-of-servings',
 'occasion',
 'preparation',
 'presentation',
 'side-dishes',
 'taste-mood',
 'technique',
 'time-to-make'}

recipe_data.ingredients = recipe_data.ingredients.apply(listify)
recipe_data.tags = recipe_data.tags.apply(listify)
recipe_data.nutrition = recipe_data.nutrition.apply(listify)
recipe_data.steps = recipe_data.steps.apply(listify)

units = ['tsp', 'tbsp', 'oz', 'cup', 'pint', 'quart', 'gallon', 'mL', 'L', 'dL', 'lb', 'mg', 'g', 'kg']
rand_units = [units[i%14] for i in range(2103719)]

ingredient_table = recipe_data[['id', 'ingredients']].explode('ingredients')
ingredient_table['quantity'] = numpy.random.randint(1,10, ingredient_table.shape[0])
ingredient_table['units'] = rand_units
ingredient_table.columns = ['recipeId', 'foodName', 'quantity', 'units']

tag_table = recipe_data[['id', 'tags']].explode('tags')
tag_table = tag_table[~tag_table.tags.isin(labels) & (~tag_table.tags.isin(cuisines))]
tag_table.columns = ['recipeId', 'tags']

recipe_table = recipe_data[['id', 'name', 'minutes', 'n_steps', 'tags', 'n_ingredients', 'contributor_id']]
recipe_table.columns = ['recipeId', 'recipeName', 'cookTime', 'difficulty', 'cuisine', 'servings', 'authorName']

def find_tags(tags, tag_set):
    tagged = list(set(tags).intersection(tag_set))
    if tagged:
        return tagged[-1]
    else:
        return None

recipe_table.cuisine = recipe_table.cuisine.apply(find_tags, args=(cuisines,))

names = pandas.read_csv('StateNames.csv').Name

def id_toName(authorID):
    return names[authorID%names.size]

recipe_table.authorName = recipe_table.authorName.apply(id_toName)

recipe_table['instructionsLink'] = "https://www.food.com/recipe/" + recipe_table.recipeName.str.replace('\s+', '-').str.cat(recipe_table.recipeId.astype('str'), '-')

from google_images_search import GoogleImagesSearch
foodImage = GoogleImagesSearch('AIzaSyD2rcfk46g_ZfpPH1YV59snFCW2T0OOeI8', '017970115376021606908:q3caxr88ame')

def find_image(recipe_name):

    _searchParams = {
        'q': recipe_name,
        'num': 1,
        'fileType': 'jpg|png'
    }
    foodImage.search(search_params=_searchParams)
    if foodImage.results():
        return foodImage.results()[0].url
    else:
        return None

recipe_test = recipe_table.head(5)
recipe_test['imageUrl'] = recipe_test.recipeName.convert_dtypes().str.replace('\s+', ' ').apply(find_image)

mySql_config = {
    "pool_size": 5,
    "max_overflow": 2,
    "pool_timeout": 30,
    "pool_recycle": 1800,
}
mySql_engine = sqlalchemy.create_engine(
                sqlalchemy.engine.url.URL(
                    drivername="mysql+pymysql",
                    username='root',
                    password='cs348',
                    host='127.0.0.1',
                    port='3306',
                    database='db_1',
                ),
                **mySql_config
            )
mySql_connection = mySql_engine.connect()

from sqlalchemy.types import Integer
from sqlalchemy.types import String
try:
    recipe_frame = recipe_table.to_sql('recipes', mySql_connection, if_exists='replace', 
                        index=False, chunksize=50, 
                        dtype={'recipeId': Integer(), 'recipeName': String(), 'cookTime': Integer(), 
                                'difficulty': Integer(), 'cuisine': String(), 'servings': Integer(),      
                                'authorName': String()})

    ingredient_frame = ingredient_table.to_sql('ingredients', mySql_connection, if_exists='replace',
                        index=False, chunksize=50,
                        dtype={'recipeId': Integer(), 'foodName': String(), 'qantity': Integer(), 
                                'units': String()})

    tag_frame = tag_table.to_sql('tags', mySql_connection, if_exists='replace',
                        index=False, chunksize=50,
                        dtype={'recipeId': String(), 'tags': String()})

except ValueError as vx:
    print(vx)

except Exception as ex:   
    print(ex)

else:
    print("Tables created successfully");   

finally:
    mySql_Connection.close()